@model Icarus.Models.tblAssertion

<script>
    $(document).ready(function () {
        var assertiondate = new Date('@Model.AssertionDate'); // Or the date you'd like converted.
        var dateassertion = new Date(assertiondate.getTime() - (assertiondate.getTimezoneOffset() * 60000)).toISOString().substring(0, 10);
        $('.assertiondate').val(dateassertion);

        var posteddate = new Date('@Model.PostedDate'); // Or the date you'd like converted.
        var dateposted = new Date(posteddate.getTime() - (posteddate.getTimezoneOffset() * 60000)).toISOString().substring(0, 10);
        $('.posteddate').val(dateposted);


        $(".cancelButton").on("click", function () {
            $(".modal-dialog").find('form').trigger('reset');
        });
        $(".close").on("click", function () {
            $(".modal-dialog").find('form').trigger('reset');
        });

        $("#markupPercent").on("keyup", function () {
            var price = $("#price").val();
            var qty = $("#qty").val();
            var totalPrice = price * qty;
            var markUpPercent = $(this).val();
            if (markUpPercent != 0) {
                var markUpValue = ((totalPrice * markUpPercent) / 100);
                var subTotal = totalPrice + markUpValue;
                $("#markUpValue").val(markUpValue);
                $("#subTotal").val(subTotal);
            }
            else {
                $(".markUpValue").val(0);
                $(".subTotal").val(totalPrice);
            }

        })
        $("#price").on("keyup", function () {
            var price = $(this).val();
            var qty = $("#qty").val();
            var totalPrice = price * qty;
            var markUpPercent = $("#markupPercent").val();
            if (markUpPercent != 0) {
                var markUpValue = ((totalPrice * markUpPercent) / 100);
                var subTotal = totalPrice + markUpValue;
                $("#markUpValue").val(markUpValue);
                $("#subTotal").val(subTotal);
            }
            else {
                $("#markUpValue").val(0);
                $("#subTotal").val(totalPrice);
            }
        });
        $("#qty").on("keyup", function () {
            var price = $("#price").val();
            var qty = $(this).val();
            var totalPrice = price * qty;
            var markUpPercent = $("#markupPercent").val();
            if (markUpPercent != 0) {
                var markUpValue = ((totalPrice * markUpPercent) / 100);
                var subTotal = totalPrice + markUpValue;
                $("#markUpValue").val(markUpValue);
                $("#subTotal").val(subTotal);
            }
            else {
                $("#markUpValue").val(0);
                $("#subTotal").val(totalPrice);
            }
        });

    });
</script>

<style>
    .required {
        color: red;
    }
</style>

<div class="modal-dialog modal-md" role="document">
    <div class="modal-content">
        <div class="modal-header">
            <h3 class="modal-title" id="myModalLabel">Edit Assertion Category</h3>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        </div>
        @using (Html.BeginForm("EditAssertion", "Admissions", FormMethod.Post))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.IDAdmission)
            @Html.HiddenFor(model => model.IDAssertion)
            <div class="modal-body">
                <div class="form">
                    <div class="form-row">
                        <div class="form-group col-sm-6">
                            <label><b>Assertion Category</b></label>
                            @Html.DropDownListFor(model => model.IDAssertionCategory, ViewBag.assertions as SelectList, new { @class = "form-control" })
                        </div>
                        <div class="form-group col-sm-6">
                            <label>Description <span class="required">*</span></label>
                            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        
                    </div>
                    <div class="form-row">
                        <div class="form-group col-sm-6">
                            <label>Assertion Date <span class="required">*</span></label>
                            @Html.TextBoxFor(model => model.AssertionDate, new { @type = "date", @id = "assertiondate", @class = "form-control assertiondate", Required = true })
                        </div>
                        <div class="form-group col-sm-6">
                            <label>Posted Date <span class="required">*</span></label>
                            @Html.TextBoxFor(model => model.PostedDate, new { @type = "date", @id = "posteddate", @class = "form-control posteddate", Required = true })
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-sm-6">
                            <label>Quantity <span class="required">*</span></label>
                            @Html.EditorFor(model => model.Qty, new { htmlAttributes = new { @type = "number", @id = "qty", @class = "form-control qty", Value = Model.Qty.ToString("0") } })
                        </div>
                        <div class="form-group col-sm-6">
                            <label>Price <span class="required">*</span></label>
                            @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @type = "number", @id = "price", @class = "form-control price", Value = Model.Price.ToString("0.00") } })
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-sm-6">
                            <label>Markup % <span class="required">*</span></label>
                            @Html.EditorFor(model => model.Markup, new { htmlAttributes = new { @type = "number", @id = "markupPercent", @class = "form-control markupPercent", Value = Model.Markup.ToString("0.00") } })
                        </div>
                        <div class="form-group col-sm-6">
                            <label><b>Markup Value</b></label>
                            @Html.EditorFor(model => model.MarkupValue, new { htmlAttributes = new { @type = "number", @readonly = "readonly", @id = "markUpValue", @class = "form-control markUpValue", Value = Model.MarkupValue.ToString("0.00") } })
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-sm-6">
                            @Html.LabelFor(model => model.SubTotal)
                            @Html.EditorFor(model => model.SubTotal, new { htmlAttributes = new { @type = "number", @readonly = "readonly", @id = "subTotal", @class = "form-control subTotal", Value = Model.SubTotal.ToString("0.00") } })

                        </div>
                        <div class="form-group col-sm-6">
                            @Html.LabelFor(model => model.Notes)
                            @Html.TextAreaFor(model => model.Notes, new { @class = "form-control", @rows = 5 })
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger btn-sm cancelButton" data-dismiss="modal">Cancel</button>
                <button type="submit" class="btn btn-sm" style="background-color:#444D8E;color:white;">Save</button>
            </div>
        }
    </div>
</div>





