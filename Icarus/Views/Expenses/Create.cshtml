@model Icarus.Models.tblExpens

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .tableheadleft {
        border-top-left-radius: 15px !important;
    }

    .tableheadright {
        border-top-right-radius: 15px !important;
    }

    .assertionTable::-webkit-scrollbar {
        width: 12px; /* width of the entire scrollbar */
        background-color: #dddddd;
        height: 10px;
    }

    .assertionTable::-webkit-scrollbar-track {
        background: #dddddd !important; /* color of the tracking area */
    }

    .assertionTable::-webkit-scrollbar-thumb {
        background: #808080 !important; /* color of the scroll thumb */
        border-radius: 20px; /* roundness of the scroll thumb */
        border: 3px solid grey !important; /* creates padding around scroll thumb */
    }

    .assertionTable {
        display: block;
        overflow-x: auto;
        white-space: nowrap;
    }
</style>
<script>
    function trial() {
        $("#editAssertionModal").modal("hide");
    }

    function Edit(id) {
        var url = $("#editAssertionModal").data("url");
        $.get(url + "/" + id, function (data) {
            $("#editAssertionModal").html(data);
            $("#editAssertionModal").modal("show");
        });
    }

    $(document).ready(function () {
        document.title = 'Create Expense';
        var now = new Date();
        var day = ("0" + now.getDate()).slice(-2);
        var month = ("0" + (now.getMonth() + 1)).slice(-2);
        var today = now.getFullYear() + "-" + (month) + "-" + (day);
        $(".posteddate").val(now.toISOString().substring(0, 10));
        $(".expensedate").val(now.toISOString().substring(0, 10));
        $('.assertionDate').val(today);
        $('.assertiondate').val(today);
        $('.dateassertion').val(today);
        $('.addassertiondateposted').val(today);
        $('.addAssertion').hide();
        var tableStart = "<table class='table table-striped table-hover table-borderless'></table>";
        var tableHeader = "<thead style='background-color: #6C7AE0; color: white;'><tr><th class='tableheadleft'>IDAdmission</th><th>Date</th><th>Description</th><th>Category</th><th>Qty</th><th>Price</th><th>MarkUp%</th><th>MarkUpValue</th><th>MarkupPrice</th><th>Subtotal</th><th>Notes</th><th class='tableheadright'>Action</th></tr></thead><tbody></tbody>";
        var assertList = [];
        var rows = [];
        var totalAmount = 0;
        var expenseassertionarray = [];

        $(".markup").on("keyup", function () {
            var price = $(".price").val();
            var qty = $(".qty").val();
            var totalPrice = price * qty;
            var markUpPercent = $(this).val();
            if (markUpPercent != 0) {
                var markUpValue = ((totalPrice * markUpPercent) / 100);
                var subTotal = totalPrice + markUpValue;
                $(".markupvalue").val(markUpValue);
                $(".subtotal").val(subTotal);
            }
            else {
                $(".markupvalue").val(0);
                $(".subtotal").val(totalPrice);
            }
        })

        $(".price").on("keyup", function () {
            var price = $(this).val();
            var qty = $(".qty").val();
            var totalPrice = price * qty;
            var markUpPercent = $(".markup").val();
            if (markUpPercent != 0) {
                var markUpValue = ((totalPrice * markUpPercent) / 100);
                var subTotal = totalPrice + markUpValue;
                $(".markupvalue").val(markUpValue);
                $(".subtotal").val(subTotal);
            }
            else {
                $(".markupValue").val(0);
                $(".subtotal").val(totalPrice);
            }
        });

        $(".qty").on("keyup", function () {
            var price = $(".price").val();
            var qty = $(this).val();
            var totalPrice = price * qty;
            var markUpPercent = $(".markup").val();
            if (markUpPercent != 0) {
                var markUpValue = ((totalPrice * markUpPercent) / 100);
                var subTotal = totalPrice + markUpValue;
                $(".markupvalue").val(markUpValue);
                $(".subtotal").val(subTotal);
            }
            else {
                $(".markupvalue").val(0);
                $(".subtotal").val(totalPrice);
            }
        });

        $('.chargeCodep').on('change', function () {
            if (this.value == "Y") {
                if (assertList.length > 0) {
                    $(".chargeCodep").prop("disabled", true);
                    $(".goBack").prop("disabled", true);
                    $('.goBack').hide();
                    var total = 0;
                    for (var i = 0; i < assertList.length; i++) {
                        var tofloat = parseFloat(assertList[i].SubTotal);
                        total += tofloat;
                    }
                    $(".chargedtocodep").val(Number(total));
                }
                window.scrollTo(0, document.body.scrollHeight);
            } else {
                if (assertList.length > 0) {
                    $('.addAssertion').show();
                }
                else {
                    $(".addAssertion").hide();
                }
                if (assertList.length > 0) {
                    $(".chargeCodep").prop("disabled", true)
                    $(".goBack").prop("disabled", true);
                    $('.goBack').hide();
                    var total = 0;
                    for (var i = 0; i < assertList.length; i++) {
                        var tofloat = parseFloat(assertList[i].SubTotal);
                        total += tofloat;
                    }
                    $(".chargedtocodep").val(Number(total));
                }
                window.scrollTo(0, document.body.scrollTop);
            }
        });

        $('.cancel').on('click', function () {
            $(".chargeCodep").val('N');
            $(".qty").val(0);
            $(".price").val(0);
            $(".markup").val(0);
            $(".markupvalue").val(0);
            $(".subtotal").val(0);
            $(".assertionnote").val('');
        });

        $("#vatexempt").on('keypress', function (event) {
            var keycode = (event.keyCode ? event.keyCode : event.which);
            if (keycode == '13') {
                event.preventDefault();
                var vatexempt = $(this).val();
                var total = Number(totalAmount) + Number(vatexempt);
                $(".amount").val(total);
            }
        });

        $("#amount").on('keyup', function () {
            totalAmount = $(this).val();
        });

        $("#amount").on('keypress', function (event) {
            var keycode = (event.keyCode ? event.keyCode : event.which);
            if (keycode == '13') {
                event.preventDefault();
                var amount = $(this).val();
                var vatsales = amount - (amount * .12);
                var vatamount = amount * .12;
                if (vatsales % 1 != 0) {
                    vatsales = vatsales.toFixed(2);
                }
                if (vatamount % 1 != 0) {
                    vatamount = vatamount.toFixed(2);
                }
                $("#vatsales").val(vatsales);
                $("#vatamount").val(vatamount);
                totalAmount = amount;
                $(this).val(Number(amount) + Number($("#vatexempt").val()));
            }
        });

        $(".cancelButton").on("click", function () {
            $(".assertionModal").find('form').trigger('reset');
        });

        $('.assertionModal').on('hidden.bs.modal', function () {
            $(this).find('form').trigger('reset');
        });

        $('.assertionModal').on('show.bs.modal', function () {
            $('.assertiondate').val(today);
            $('.addassertiondateposted').val(today);
        });

        $(".addAssertion").on('click', function () {
            var description = $("#description").val();
            description == '' || description == null ? $("#descriptionMessage").text("Description is required!") : $("#descriptionMessage").text(null);
            if (description != null && description != '') {
                $(".assertionModal").modal();
            }
        });

        $(".addButton").on('click', function () {
            var qty = $(".qty").val();
            var price = $(".price").val();
            var markup = $(".markup").val();
            var markupvalue = $(".markupvalue").val();
            var subtotal = $(".subtotal").val();
            var assertionnote = $(".assertionnote").val();
            var assertionDate = $('.assertiondate').val();
            if (qty == 0 || qty == null) {
                return $("#qtyMessage").text("Quantity should be greater than zero!");
            }
            else {
                $("#qtyMessage").text(null)
            }

            if (price == 0 || price == null) {
                return $("#priceMessage").text("Price should be greater than zero!");
            }
            else {
                $("#priceMessage").text("")
            }

            if (markupvalue == null || markupvalue == '') {
                markupvalue = 0.00;
            }

            if (markup == null || markup == '') {
                markup = 0.00;
            }

            if (assertionnote == "") {
                assertionnote = '';
            }

            var assertion = {
                Description: $("#description").val(),
                IDAdmission: $(".admission").children("option:selected").val(),
                AssertionDate: assertionDate,
                IDAssertionCategory: $(".categorychooser").children("option:selected").val(),
                Qty: qty,
                Price: price,
                Markup: markup,
                MarkupValue: markupvalue,
                SubTotal: subtotal,
                Notes: assertionnote,
                IDChargeToCodep: $("#idctc").val(),
                PostedDate: $(".addassertiondateposted").val()
            };

            var data = $.parseJSON($.ajax({
                url: '/Expenses/CreateAssertion',
                method: "POST",
                data: assertion,
                async: false
            }).responseText);

            var tempAssertion = assertion;
            tempAssertion.IDAssertion = data;
            assertion = tempAssertion;

            $("#assertionModal").modal("hide");
            var row = "<tr><td>" + $(".admission").children("option:selected").html() + "</td><td>" + assertionDate + "</td><td>" + $("#description").val() + "</td><td>" + $(".categorychooser").children("option:selected").html() + "</td><td>" + qty + "</td><td>" + price + "</td><td>" + markup + "</td><td>" + markupvalue + "</td><td>" + subtotal + "</td><td>" + subtotal + "</td><td>" + assertionnote + "</td> <td><button class='btn btn-sm btn-warning' value='" + assertion.IDAssertion + "' onclick='Edit(" + assertion.IDAssertion + ")'>Edit</button></td></tr>";
            rows.push(row);
            if (jQuery.isEmptyObject(assertList)) {
                $(".assertionTable").append(tableStart)
                $(".table").append(tableHeader)
                $(".table tbody").append(row);
            }
            else {
                $('.table tbody tr:last').remove();
                $(".table tbody").append(row);
            }

            assertList.push(assertion);

            var total = 0;
            for (var i = 0; i < assertList.length; i++) {
                var tofloat = parseFloat(assertList[i].SubTotal);
                total += tofloat;
            }

            var footertable = "<tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td><b>Total:</b></td><td><b>" + total + " </b></td><td> </td><td> </td></tr>";
            $(".chargedtocodep").val(Number(total));
            $(".table tbody").append(footertable)
            if (assertList.length == 1) {
                window.scrollTo(0, document.body.scrollHeight);
            }
            $(".successmodal").modal().show();
        });

        $("#description").on("keypress", function (event) {
            var keycode = (event.keyCode ? event.keyCode : event.which);
            if (keycode == '13') {
                var description = $("#description").val();
                var chargedate = $('.dateassertion').val();
                description == '' || description == null ? $("#descriptionMessage").text("Description is required!") : $("#descriptionMessage").text(null);
                chargedate == '' || description == null ? $("#chargeDateMessage").text("Charge Date is required!") : $("#chargeDateMessage").text(null);
                if ((description != null && description != '') && (chargedate != null && chargedate != "")) {
                    var expensesassertion = { IDChargeToCodep: $("#idctc").val(), ChargeDate: $("#chargedate").val(), IDAssertionCategory: $(".categorychooser").children("option:selected").val(), IDExpense: $("#idexpense").val(), Description: $("#description").val() };
                    if (!jQuery.isEmptyObject(expenseassertionarray)) {
                        $.ajax({
                            url: '/Expenses/EditExpensesAssertion',
                            method: "POST",
                            data: expensesassertion,
                            success: function (data) {
                                if (data == "Success") {
                                    expenseassertionarray[0] = expensesassertion;
                                    $('.createButton').removeAttr("type").attr("type", "submit");
                                }
                            },
                            error: function (err) {
                            }
                        });
                    } else {
                        $.ajax({
                            url: '/Expenses/CreateExpensesAssertion',
                            method: "POST",
                            data: expensesassertion,
                            success: function (data) {
                                if (data == "Success") {
                                    expenseassertionarray.push(expensesassertion);
                                    $('.createButton').removeAttr("type").attr("type", "submit");
                                }
                            },
                            error: function (err) {
                            }
                        });
                    }
                    if ($(".chargeCodep").val() == "Y") {
                        $(".addAssertion").show();
                    } else {
                        $(".addAssertion").hide();
                    }
                    event.preventDefault();
                }
            }
        });


        $.fn.saveEdited = function (data, admission, category) {
            for (var i = 0; i < assertList.length; i++) {
                if (data.IDAssertion == assertList[i].IDAssertion) {
                    console.log("DATA", data)
                    var date = new Date(data.AssertionDate).toLocaleDateString('en-ZA')
                    var row = "<tr><td>" + admission + "</td><td>" + date + "</td><td>" + data.Description + "</td><td>" + category + "</td><td>" + Number(data.Qty).toFixed(2) + "</td><td>" + Number(data.Price).toFixed(2) + "</td><td>" + Number(data.Markup).toFixed(2) + "</td><td>" + data.MarkupValue + "</td><td>" + data.SubTotal + "</td><td>" + data.SubTotal + "</td><td>" + data.Notes + "</td> <td><button class='btn btn-sm btn-warning' value='" + data.IDAssertion + "' onclick='Edit(" + data.IDAssertion + ")'>Edit</button></td></tr>";
                    rows[i] = row;
                    assertList[i] = data;
                }
            }
            $(".table tbody").empty();
            $.each(rows, function (index, value) {
                $(".table tbody").append(value);
            })
            var total = 0;
            for (var i = 0; i < assertList.length; i++) {
                var tofloat = parseFloat(assertList[i].SubTotal);
                total += tofloat;
            }
            var footertable = "<tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td><b>Total:</b></td><td><b>" + total + " </b></td><td> </td><td> </td></tr>";
            $(".chargedtocodep").val(Number(total));
            $(".table tbody").append(footertable)
        }

    });
</script>

<div class="container mb-5 pb-5">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.EncodedBy)
        @Html.HiddenFor(model => model.DatePosted)
        <div class="d-flex align-items-center justify-content-between">
            <h2>Create Expense</h2>
            <div>
                <a type="button" class="btn btn-warning goBack" href="/Expenses">Go Back</a>
                <input type="button" value="Create" class="btn btn-primary createButton" />
            </div>
        </div>
        <hr />
        <div class="form">
            <div class="form-row">
                <div class="form-group col-sm-4">
                    <label><b>Date Posted <span style="color:red;">*</span></b></label>
                    @Html.TextBoxFor(model => model.PostedDate, new { @type = "date", @class = "form-control posteddate", Required = true })
                </div>
                <div class="form-group col-sm-4">
                    <label><b>Expense Date</b></label>
                    @Html.TextBoxFor(model => model.ExpenseDate, new { @type = "date", @class = "form-control expensedate" })
                </div>
                <div class="form-group col-sm-4">
                    <label><b>OR Number</b></label>
                    @Html.EditorFor(model => model.ORNumber, new { htmlAttributes = new { @type="number", @class = "form-control", autocomplete = "off" } })
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-sm-4">
                    <label><b>Vendor</b></label>
                    @Html.DropDownListFor(model => model.IDVendor, (SelectList)ViewBag.vendors, new { @class = "form-control" })
                </div>
                <div class="form-group col-sm-4">
                    <label><b>With Receipt</b></label>
                    @Html.DropDownListFor(modelItem => modelItem.WithReceipt,
                 (
                     new[] { new SelectListItem { Text = "N", Value = "N" },
                                new SelectListItem { Text = "Y", Value = "Y" }
                 }),
                 new { @class = "form-control" })
                </div>
                <div class="form-group col-sm-4">
                    <label><b>ID Account</b></label>
                    @Html.DropDownListFor(model => model.IDAccount, ViewBag.accountsList as SelectList, new { @class = "form-control" })
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-sm-4">
                    <label><b>Verified</b></label>
                    @Html.DropDownListFor(modelItem => modelItem.IsVerified,
                 (
                     new[] { new SelectListItem { Text = "N", Value = "N" },
                                new SelectListItem { Text = "Y", Value = "Y" }
                 }),
                 new { @class = "form-control" })
                </div>
                <div class="form-group col-sm-4">
                    <label><b>Amount <span style="color:red;">*</span></b></label>
                    @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @id = "amount", @type = "number", @class = "form-control amount", @Value = "0", Required = true } })
                </div>
                <div class="form-group col-sm-4">
                    <label><b>VAT Sales</b></label>
                    @Html.EditorFor(model => model.VATSales, new { htmlAttributes = new { @id = "vatsales", @type = "number", @class = "form-control vatsales", @Value = "0.00", @readonly = "readonly" } })
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-sm-4">
                    <label><b>VAT Amount</b></label>
                    @Html.EditorFor(model => model.VATAmount, new { htmlAttributes = new { @id = "vatamount", @type = "number", @class = "form-control vatamount", @Value = "0.00", @readonly = "readonly" } })

                </div>
                <div class="form-group col-sm-4">
                    <label><b>VAT Exempt</b></label>
                    @Html.EditorFor(model => model.VATExempt, new { htmlAttributes = new { @id = "vatexempt", @type = "number", @class = "form-control vatexempt", @Value = "0" } })
                </div>
                <div class="form-group col-sm-4">
                    <label><b>TIN</b></label>
                    @Html.EditorFor(model => model.TIN, new { htmlAttributes = new { @type="number", id = "tin", @class = "form-control tin", autocomplete = "off" } })
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-sm-4">
                    <label><b>Charged To Codep</b></label>
                    @Html.EditorFor(model => model.ChargedToCodep, new { htmlAttributes = new { @id = "chargedtocodep", @type = "number", @class = "form-control chargedtocodep", @Value = "0", @readonly = "readonly" } })
                </div>
                <div class="form-group col-sm-4">
                    <label><b>Charge To Codep</b></label>
                    @Html.DropDownListFor(modelItem => modelItem.ChargeToCodep,
                 (
                     new[] { new SelectListItem { Text = "N", Value = "N" },
                                new SelectListItem { Text = "Y", Value = "Y" }
                 }),
                 new { @class = "form-control chargeCodep" })
                </div>
                <div class="form-group col-sm-4">
                    <label><b>Particulars</b></label>
                    @Html.TextAreaFor(model => model.Particulars, new { @class = "form-control", @rows = 5 })
                </div>
            </div>
        </div>
    }
    <div id="assertionButton">
        <button class="btn addAssertion" id="addAssertion" style="background-color:#4E58A2;color:white;">
            <i class="fa fa-plus-circle" aria-hidden="true"></i>
            <span>&nbsp;Add Assertion</span>
        </button>
        <div class="row col-sm-12 mt-4">
            <div class="col-sm-3 pl-0 idToCodep" style="display:none;">
                <label>ID ChargeTo Codep</label>
                <input class="form-control idctc" id="idctc" value="@ViewBag.lastIDCTC" type="number" disabled />
                <span></span>
            </div>
            <div class="col-sm-3 pl-0 idExpense">
                <label>ID Expense</label>
                <input class="form-control idexpense" id="idexpense" value="@ViewBag.lastIDEXP" type="number" disabled />
            </div>
            <div class="col-sm-3 pl-0 assertionDate">
                <label>Charge Date</label>
                <input class="form-control dateassertion" id="chargedate" type="date" />
                <span id="chargeDateMessage" style="color:red;"></span>
            </div>
            <div class="col-sm-3 pl-0 assertionCategory">
                <label>Assertion Category</label>
                <select class="form-control categorychooser" id="categoryChooser">
                    @foreach (var item in ViewBag.category)
                    {
                        <option value="@item.Value">@item.Text</option>
                    }
                </select>
            </div>
            <div class="col-sm-3 description pl-0">
                <label><b>Description</b></label>
                <input class="form-control description" id="description" autocomplete="off" />
                <span id="descriptionMessage" style="color:red;"></span>
            </div>
        </div>
        @*<div class="row col-sm-12 mt-4">
            
        </div>*@
    </div>

    <div class="modal fade assertionModal" id="assertionModal" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="gridSystemModalLabel">Add Assertion</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="row p-2">
                            <div class="col-sm-4">
                                <label><b>ID Admission</b></label>
                                <select class="form-control admission" id="admission">
                                    @foreach (var item in ViewBag.residentList)
                                    {
                                        <option value="@item.Value">@item.Text</option>
                                    }
                                </select>
                                <span id="admissionMessage"></span>
                            </div>
                            <div class="col-sm-4">
                                <label><b>Assertion Date</b></label>
                                <input class="form-control assertiondate" name="assertiondate" type="date" />
                                <span id="assertionDateMessage"></span>
                            </div>
                            <div class="col-sm-4">
                                <label><b>Qty</b></label>
                                <input class="form-control qty" name="qty" type="number" value="0" min="0" step="1" oninput="validity.valid||(value='');" />
                                <span style="color:red;" id="qtyMessage"></span>
                            </div>
                        </div>
                        <div class="row p-2">
                            <div class="col-sm-4">
                                <label><b>Price</b></label>
                                <input class="form-control price" name="price" step="any" type="number" value="0" />
                                <span id="priceMessage" style="color:red;"></span>
                            </div>
                            <div class="col-sm-4">
                                <label><b>Markup %</b></label>
                                <input class="form-control markup" name="markup" step="any" type="number" value="0.00" />
                                <span id="markupMessage"></span>
                            </div>
                            <div class="col-sm-4">
                                <label><b>Markup Value</b></label>
                                <input type="number" class="form-control markupvalue" step="any" name="markupvalue" disabled value="0.00" />
                                <span id="markupValueMessage"></span>
                            </div>
                        </div>
                        <div class="row p-2">
                            <div class="col-sm-4">
                                <label><b>Subtotal</b></label>
                                <input type="number" class="form-control subtotal" step="any" value="0" name="subtotal" disabled />
                                <span id="subtotalMessage"></span>
                            </div>
                            <div class="col-sm-4">
                                <label><b>Posted Date</b></label>
                                <input type="date" class="form-control addassertiondateposted" name="posteddate" id="addassertiondateposted" />
                                <span id="postedDateMessage"></span>
                            </div>
                            <div class="col-sm-4">
                                <label><b>Notes</b></label>
                                <textarea class="form-control assertionnote" rows="5" id="note"></textarea>
                                <span id="notesMessage"></span>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger cancelButton" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary addButton">Add</button>
                </div>
            </div><!-- /.modal-content -->
        </div><!-- /.modal-dialog -->
    </div><!-- /.modal -->
</div>
<div class="container">
    <br />
    <br />
    <div class="assertionTable">

    </div>
    <div class="footerTable"></div>
</div>
<div class="modal fade" id="editAssertionModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" data-url="@Url.Action("EditAssertionPartial","Expenses")">
</div>
<div class="modal fade successmodal" id="successmodal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="myModalLabel">Message</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            </div>
            <div class="modal-body">
                Successfully added!
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger btn-sm" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>